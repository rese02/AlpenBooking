rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Hotels can be read by anyone (for resolving domain to hotelId), 
    // but only created, updated, deleted by an authenticated admin user (future implementation)
    // For now, we keep it more open for development.
    match /hotels/{hotelId} {
      allow read: if true;
      allow write, delete: if true; // In production: if request.auth.token.admin == true;
    }

    // A user can only access bookings belonging to their hotel.
    // Guests have more restricted access.
    match /bookings/{bookingId} {
      // READ: 
      // 1. Authenticated user (hotelier/admin) can read if the booking's hotelId matches their claim.
      //    (Future: would use request.auth.token.hotelId == resource.data.hotelId)
      // 2. Unauthenticated users (guests) can ONLY read if they provide a valid token.
      //    (This would be a future implementation with Cloud Functions for secure token generation)
      // For now, we allow hotelier to read if it matches the hotelId they are currently viewing.
      allow read: if true; // This rule needs to be refined with proper auth.

      // WRITE (create, update, delete):
      // Only authenticated users (hoteliers/admin) can write.
      // Update/Delete should also check ownership.
      allow write, delete: if true; // In production: if request.auth != null && get(/databases/$(database)/documents/hotels/$(resource.data.hotelId)).data.ownerId == request.auth.uid;
    }

    // Fallback rule for all other collections - deny access.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
